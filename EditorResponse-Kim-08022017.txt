
Dear authors,
Let me first confess that I am not really an expert on software evolution. Take my comments as potentially useful suggestions offered by someone who are knowledgeable on software engineering issues in general. At the cost of being verbose, let me write down my opinions so that you may find some of my comments useful in revising and finalizing the chapter.

Overall, I really like the organization of the chapter, and it is in pretty good shape. Your chapter helped me better understand various topics relevant to software evolution. On your "rather extended" references,  I am not the one to decide which is right. You are, and I will support your final decision. 

If I were to offer my opinions from the viewpoints of "consumers" (e.g., PhD students beginning research on this topic), I have a mixed opinion. While having a thorough references will give me a level of comfort, it would not be as useful as I hope due to "overflow". I would want to know which papers I should read next after finishing your chapter, and I may not be too strongly motivated if there are too many to read. As established experts on the topic, it would have been nicer if you had told the audience what papers are worth reading and why. That is, I would like to see more of selective (rather than comprehensive) discussion and op-ed like discussion on the chosen topics. For example, discussion on representative tools and techniques (e.g., CodeFlow, RefFinder, etc) are highly useful to me. If it is impractical (or not that useful) to be selective on discussion on empirical studies, I understand why but would try to focus mostly only on the studies that are worth further discussion. Needless to say, I would want your op-ed like discussion on why such papers are worth reading.

If you believe that it is beneficial to explictly denote "seminal" or "influential" papers on each topic, you might annotate figures with references. Perhaps you could move Fig 1 to the beginning of section 3 and annotate them with "major" references. For example, on Empirical stuides on Bugs, I would pick [135,120] and annotate Fig 1 as such. Do it only if you like the idea. 

=> Throughout the paper, we have reduced the citations and added more opinions and perspectives.

=> We decided not to add seminal paper citations in the figure, as some citations are seminal, worth reading but some are rather *a* representative example in the line of research. 

Section 2.2 
This argument was less clear and persuasive to me. I would suspect that I do not need to modify the program and that smart compiler should generate optimized code. What do I miss here? 
=> Deleted cross language translation. 

Section 2.3.
- Section reference fixed
Perhaps due to my lack of deep knowledge on this topic, but I would appreciate more detailed (perhaps along with examples) discussions on "crosscutting concerns" concept
=> Expanded a description on crosscutting concerns. 

Section 3.1 
I offer this suggestion with caution. ;) Having information on diverse empirical studies is useful, but are they all equally valuable as candidates for further reading? If not, you might decide to become more selective so that readers are more likely to read given the limited time available. 
==> We removed citations and talked about two representative examples instead. 

Do numbers add up properly? I thought that 16.3%, 37.2%, and 81.1% indicate Mozilla values and that they should add up to 100%. What did I misunderstand?
=> They are not supposed to add up to 100% as NULL pointer dereference is a
part of memory bugs and the percentages are within memory bugs. 

Did they report on the type of repeated bugs? 
=> They did not. But the study found that the bugs that can be detected by
past bug fix histories do not overlap with the bugs that can be detected by
a static bug finding tool, PMD. 

Section 3.1.3. 
reference? 
=> Added a reference to GenProg

How do such actions achieve the goal of automated repair? I would ask such question and would want to know your explanation.
=> We expanded the description of GenProg. 

I understand that automated repair is easier said than done, but I am not ready to accept what you convey as claimed in the papers.  
=> I removed the potentially controversional claims, and expanded the
description of AutoFix-E, a representative technique in the area of
specification-based repair. 

Section 3.2. 

What do you mean by this? From Java 7 to Java 8? Or, did I find a mistake in writing?
=> It was a typo.  We meant Java to C. We fixed the typo. 


Section 3.2.1 

It would be nice to hear from you what they found out. I guess I am lazy. ;)
=>Taking your earlier comment on focusing on representative examples, we felt
that earlier text enumerated too many empirical studies one by one with
explict reference to individual author names. Therefore, we updated the text
so that we can discuss four high-level themes that appeared in the empirical
studies of cross-system porting. We therefore removed a reference to Ozment et
al and emphasized the case study of Ray et al, as it is a representative study
in that space in my opinion. 

Section 3.2.3.

I think it is unnecessary. Not here.
=> Removed the acronym description of Application Program Interfaces and just
kept API. 

Section 3.3.2 
to to => typo fixed 


IMHO, this example does not serve much purpose. Rather, I would like to see more op-ed like discussion on the usefulness of AOP and FOP from the viewpoint of software evolution in general and crosscutting concerns in particular. 
=> We agree that the example is rather abstract and not very useful.
Therefore, we removed the example and discussed the benefits of using AOP and
FOP instead. 

Section 3.4.2 
citation missing?
 
=> We added a citation to Purushothaman and Perry. 

Am I right in getting impression that [182] and [113] reported results that seem to conflict with each other? While I understand that it is entirely possible due to many factors, I would want to hear expert explanation on it if you are kind enough to offer any.
=> We restructured Section 3.4.2 to clarify that there are two contradicting
beliefs about refactoring and empirical evidence supporting two distinct views
is also contrary to each other. We made edits such that the text is separated into two
views clearly. 
 
Section 3.4.3 
I understand why such preconditions are proposed, but are they important enough to be "formalized" like Fig 3? Perahps informal and intuitive description would be sufficient. You may not even have to list all 5. I offer suggestions, and you decide. 

=> We agree that the original Fig 3 was visually overwhelming. We  deleted the
fiture and added intuitive and informal descriptions in text instead. 


Figure 4. 
Somehow, I tried to relate this numbers to 86% mentioned earlier. Another suggestion is to use larger font so that "mature" readers like I can also see the figures more clearly. Sigh...
=> We made the figure size bigger.  

SEction 3.4.6 
This is just an example of topics that can be addressed in greater detail if you also believe that they deserve more in-depth coverage. As for the page count, your current chapter is not short, but can be extended by a few more pages if you like.
Springer will not charge you by each additional page. ;)

=> I added some conrete code smells from DECOR. 

Figure 6 

As mentioned earlier, I liked seminal or representative approach being described in reasonable depth.
Unfortunately, I did not understand the "value" of the transformation rules used here. They looked the same to me. Perhaps example of before-and-after would help?

=> We replaced the example to talk about the TXL approach with more details.
The newly added text should be made clear what is the before and after the
transformation. 


My personal opinion is that editing-related issues can be dropped if you feel the need to reduce page counts. But, you make the final call. There is no page limit on this project.
=> I actually believe that the line of work on simultaneous editing is
important. Therefore, I decided to keep. I added a new code example to discuss
the LASE capability in more details as well. 
 
